#!/bin/bash

set -e -o pipefail -u

NAME="$(basename "$0")"
REPO_DIR="$(dirname "$(dirname "$0")")"
VENV_DIR=".venv"
PYTHON_DIR="python"

source "$(dirname "$0")/bash-utils"

# -- FUNCTIONS --

# Args: None.
check_working_tree_clean () {
    if [[ -n "$(git diff --name-only)" ]]; then
        error 'Working tree is dirty. `git add` and/or `git stash` changes to clean the tree.'
        exit 1
    fi
}

# Args: None.
check_filetype () {
    local paths
    paths="$(git diff --cached --name-only --diff-filter=ACMRT)"
    if echo "$paths" | xargs file --mime-type -b | grep -Eqv '^(text/|application/x-empty$)'; then
        echo "$paths" | xargs file --mime-type | grep -Ev '^(text/|application/x-empty$)'
        error "One or more files (listed above) are not text files."
        exit 1
    fi
}

# Args: None.
check_filesize () {
    local sizes max_size total_size
    sizes="$(git ls-files --cached | xargs stat -c %s)"
    max_size="$(echo "$sizes" | sort -rn | head -n1)"
    if [[ "$max_size" -gt 100000 ]]; then
        git ls-files --cached \
        | xargs stat -c '%s'$'\t''%n' \
        | awk '$1 > 100000'
        error "One or more files (listed above) exceed(s) the 100 KB size limit."
        exit 1
    fi
    total_size="$(echo "$sizes" | awk 'BEGIN { s = 0 } { s += $1 } END { print s }')"
    if [[ "$total_size" -gt 1000000 ]]; then
        git ls-files --cached \
        | xargs stat -c '%s'$'\t''%n' \
        | sort -k1,1rn \
        | head -n10
        error "The working tree exceeds the 1 MB size limit. The largest files are listed above."
        exit 1
    fi
}

# Args: None.
run_flake8 () {
    if ! which flake8 >/dev/null 2>&1; then
        error "flake8 not found. Please add flake8 to the Pipfile under [dev-packages]."
        exit 1
    fi
    run flake8 --config="./.flake8" --show-source "$PYTHON_DIR"
}

# Args: None.
run_mypy () {
    if ! which mypy >/dev/null 2>&1; then
        error "mypy not found. Please add mypy to the Pipfile under [dev-packages]."
        exit 1
    fi
    run mypy --config-file="./mypy.ini" --show-error-context python
}

# -- MAIN --

usage () {
    echo "Usage: $NAME" 1>&2
    echo "    Checks that the working tree satisfies the linting requirements of the repo." 1>&2
    echo "    Requires that the working tree be 'clean' i.e. match the index." 1>&2
}

# Parse arguments.
if [[ $# -eq 1 ]]; then
    if [[ "$1" == "help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        usage
        exit 0
    fi
fi
if [[ $# -gt 0 ]]; then
    usage
    exit 1
fi

cd "$REPO_DIR"
if deactivate >/dev/null 2>&1; then
    deactivate
fi
run bin/pyvenv-update
source "${VENV_DIR}/bin/activate"

# Run linters.
check_working_tree_clean
check_filetype
check_filesize
run_flake8
run_mypy
