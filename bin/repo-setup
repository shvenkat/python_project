#!/bin/bash

set -e -o pipefail -u

NAME="$(basename "$0")"
REPO_DIR="$(dirname "$(dirname "$0")")"

source "$(dirname "$0")/bash-utils"

# -- FUNCTIONS --

# Args: None.
configure_git () {
    info "Configuring git for this repository: $REPO_DIR"

    # Set up a git pre-commit hook to enforce linting at commit time.
    local hook_script="bin/repo-lint"
    local hook_path=".git/hooks/pre-commit"
    if [[ ! -x "$hook_script" ]]; then
        error "  Commit hook $hook_script not found or not executable."
        exit 1
    fi
    rm -f "$hook_path"
    cat > "$hook_path" <<EOF
#!/bin/bash
set -e -u -o pipefail
"\$(dirname "\$0")/../../$hook_script"
EOF
    chmod +x "$hook_path"
    # ln -sf "../../$hook_script" .git/hooks/pre-commit

    # Set up a gitconfig file with settings specific to this repository.
    local config_file=".gitconfig"
    local config_path="../.gitconfig"
    if [[ ! -r "$config_file" ]]; then
        error "  Config file $config_file not found."
        exit 1
    fi
    if ! git config --local --get-all include.path | grep -qF "$config_path"; then
        git config --local --add include.path "$config_path"
    fi

    # Check that the top-level gitattributes file is not overridden.
    local attributes_file=".gitattributes"
    local untracked_attributes_file=".git/info/attributes"
    if [[ ! -r "$attributes_file" ]]; then
        error "  Config file $attributes_file not found."
        exit 1
    fi
    if [[ -r "$untracked_attributes_file" ]]; then
        warn "  Removing untracked attributes file $untracked_attributes_file."
        rm -f "$untracked_attributes_file"
    fi
}

# -- MAIN --

# Args: None.
usage () {
    echo "Usage: $NAME [-h|--help|help]" 1>&2
    echo "    Sets up the repository in $REPO_DIR for running python applications" 1>&2
    echo "    building docker images or contributing improvements." 1>&2
}

# Parse arguments.
if [[ $# -eq 1 ]]; then
    if [[ "$1" == "help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        usage
        exit 0
    else
        usage
        exit 1
    fi
elif [[ $# -gt 1 ]]; then
    usage
    exit 1
fi

cd "$REPO_DIR"

# Configure git.
configure_git

# Check prerequisites.
run --verbose bin/prereq-check

# Update python environment.
run --verbose bin/pyvenv-update
