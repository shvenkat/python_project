# pylint: disable=all

# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a full list see the
# documentation: http://www.sphinx-doc.org/en/master/config.

import os
import sys
from typing import Any, Dict, List  # noqa: F401


# `make html` is executed in the `docs/sphinx` directory to build the documentation. The package
# to be documented is located in the repository root directory, which should therefore be added
# to the module search path.
sys.path.insert(0, os.path.abspath("../.."))


# PROJECT INFORMATION

project = "Project Name"
copyright = "Year, Owner"
author = "Author"
version = ""  # The short X.Y version
release = ""  # The full version, including alpha/beta/rc tags


# GENERAL CONFIGURATION

# needs_sphinx = '1.0'
extensions = [
    "sphinx.ext.autodoc",  # Autodoc extracts documentation from docstrings.
    "sphinx.ext.autosummary",  # Generates a summary table of classes and functions in each module.
    "sphinx.ext.doctest",  # Runs examples in docstrings as tests.
    "sphinx.ext.intersphinx",  # Allows links to other projects, internal or external.
    "sphinx.ext.todo",  # Formats TO DO lists.
    "sphinx.ext.coverage",
    "sphinx.ext.imgmath",  # Renders math using LaTeX, not MathJax.
    "sphinx.ext.viewcode",  # Adds links to the source code.
    "sphinx.ext.napoleon",  # Napoleon parses Google-style docstrings.
]

templates_path = ["_templates"]
source_suffix = ".rst"  # The suffix(es) of source filenames, e.g. ".rst" or ['.rst', '.md'].
master_doc = "index"  # The master toctree document.
language = None  # Language for autogenerated content.
exclude_patterns = []  # type: List[str]

add_module_names = False  # Omit module name prefix from each class and function.
add_function_parentheses = False

html_theme = "pyramid"  # A simple understated theme. "sphinxdoc" is another option.
# html_theme_options = {}  # Theme-specific customization.
html_static_path = ["_static"]  # Directory with custom static files (e.g. CSS).
# html_sidebars = {}       # Sidebar customization.

pygments_style = "sphinx"  # Syntax highlighting style.


# EXTENSION CONFIGURATION

# Autodoc settings.
autodoc_member_order = "bysource"

# Napoleon settings.
napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_keyword = True
napoleon_use_rtype = True

# Imgmath settings.
imgmath_image_format = "svg"
imgmath_dvisvgm_args = ["--no-fonts", "--zoom=1.3"]

# Intersphinx settings.
intersphinx_mapping = {"https://docs.python.org/": None}

# Todo settings.
todo_include_todos = True


# PROJECT-SPECIFIC HOOKS


def skip_namedtuple_boilerplate(app, what, name, obj, skip, options):
    # type: (Any, str, str, Any, bool, Any) -> bool
    """Skips useless boilerplate in NamedTuple sub-classes."""
    # Skip auto-generated documentation for each field: "Alias for field number n."
    is_field_boilerplate = (
        hasattr(obj, "__doc__")
        and obj.__doc__ is not None
        and obj.__doc__.startswith("Alias for field number")
    )
    # Skip special methods such as __getnewargs__, __new__ and __repr__.
    # FIXME: This doesn't work. Instead napoleon_include_special_with_doc = False omits "dunder"
    # methods globally.
    is_special_boilerplate = (
        hasattr(obj, "__module__")
        and obj.__module__ is not None
        and obj.__module__.startswith("namedtuple_")
    )
    is_boilerplate = is_field_boilerplate or is_special_boilerplate
    return skip or is_boilerplate


# def maybe_process_docstring(app, what, name, obj, options, lines):
#     # type: (Any, str, str, Any, Any, List[str]) -> None
#     """Alter the docstring under some condition."""
#     if some_condition:
#         lines[:] = []


def setup(app):
    # type: (Any,) -> None
    app.connect("autodoc-skip-member", skip_namedtuple_boilerplate)
    # app.connect('autodoc-process-docstring', process_docstring)
